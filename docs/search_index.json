[
["index.html", "Ejercicios FESTAD Introducción", " Ejercicios FESTAD Miguel Ángel Porras 2017-01-21 Introducción Estos ejercicios fueron realizados para la asignatura FESTAD del máster de DS y BD "],
["chickweight.html", "Ejercicio 1 - ChickWeight 1.1 Cargando los datos 1.2 Tablas de frencuencia 1.3 Buscando outliers 1.4 Tabla de frecuencia conjunta 1.5 Histograma del peso en cada grupo de edad", " Ejercicio 1 - ChickWeight 1.1 Cargando los datos Cargamos la librería ChickWeight. data(ChickWeight) head(ChickWeight) ## weight Time Chick Diet ## 1 42 0 1 1 ## 2 51 2 1 1 ## 3 59 4 1 1 ## 4 64 6 1 1 ## 5 76 8 1 1 ## 6 93 10 1 1 Veamos un breve resumen de los datos. summary(ChickWeight) ## weight Time Chick Diet ## Min. : 35.0 Min. : 0.00 13 : 12 1:220 ## 1st Qu.: 63.0 1st Qu.: 4.00 9 : 12 2:120 ## Median :103.0 Median :10.00 20 : 12 3:120 ## Mean :121.8 Mean :10.72 10 : 12 4:118 ## 3rd Qu.:163.8 3rd Qu.:16.00 17 : 12 ## Max. :373.0 Max. :21.00 19 : 12 ## (Other):506 1.2 Tablas de frencuencia La tabla de frecuencia absoluta para la variable weight dividida en 10 subintervalos es, table(cut(ChickWeight$weight,breaks = 10)) ## ## (34.7,68.8] (68.8,103] (103,136] (136,170] (170,204] (204,238] ## 174 111 82 82 51 35 ## (238,272] (272,305] (305,339] (339,373] ## 18 14 8 3 Para la variable time dividida en 7 subintervalos es, table(cut(ChickWeight$Time,breaks = 7)) ## ## (-0.021,3] (3,6] (6,9] (9,12] (12,15] (15,18] ## 100 98 49 98 48 94 ## (18,21] ## 91 Para la variable Chick tablaDes &lt;- table(ChickWeight$Chick) tablaDes &lt;-tablaDes[order(as.numeric(names(tablaDes)))] tablaDes ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## 12 12 12 12 12 12 12 11 12 12 12 12 12 12 8 7 12 2 12 12 12 12 12 12 12 ## 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ## 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 10 12 12 12 12 12 12 1.3 Buscando outliers Calculamos los posibles valores de la variable Time vec.time&lt;-unique(ChickWeight$Time) vec.time ## [1] 0 2 4 6 8 10 12 14 16 18 20 21 Programamos el siguiente bucle para ver la lista de los outliers. for (days in vec.time) { df = subset(ChickWeight, Time==days,select=c(1)) media.df = mean(df$weight) var.df = sd(df$weight) int &lt;- c(media.df-2*var.df,media.df+2*var.df) out &lt;- which((df &lt; int[1]) | (df &gt;int[2])) if (length(out) != 0){ print(paste(c(&quot;Los outliers para la edad&quot;, days, &quot;son&quot;, out),collapse= &quot; &quot;)) } } ## [1] &quot;Los outliers para la edad 2 son 3 18&quot; ## [1] &quot;Los outliers para la edad 4 son 5 16 42&quot; ## [1] &quot;Los outliers para la edad 6 son 16 42&quot; ## [1] &quot;Los outliers para la edad 8 son 16 20 42&quot; ## [1] &quot;Los outliers para la edad 10 son 16 20 34 42&quot; ## [1] &quot;Los outliers para la edad 12 son 16 20 34&quot; ## [1] &quot;Los outliers para la edad 14 son 19 33&quot; ## [1] &quot;Los outliers para la edad 16 son 13 18 21 32&quot; ## [1] &quot;Los outliers para la edad 18 son 18 21 32&quot; ## [1] &quot;Los outliers para la edad 20 son 21 32&quot; ## [1] &quot;Los outliers para la edad 21 son 20 31&quot; 1.4 Tabla de frecuencia conjunta conjuDes &lt;- table(ChickWeight$Chick,ChickWeight$Diet) conjunta &lt;- conjuDes[order(as.numeric(rownames(conjuDes))), ] conjunta ## ## 1 2 3 4 ## 1 12 0 0 0 ## 2 12 0 0 0 ## 3 12 0 0 0 ## 4 12 0 0 0 ## 5 12 0 0 0 ## 6 12 0 0 0 ## 7 12 0 0 0 ## 8 11 0 0 0 ## 9 12 0 0 0 ## 10 12 0 0 0 ## 11 12 0 0 0 ## 12 12 0 0 0 ## 13 12 0 0 0 ## 14 12 0 0 0 ## 15 8 0 0 0 ## 16 7 0 0 0 ## 17 12 0 0 0 ## 18 2 0 0 0 ## 19 12 0 0 0 ## 20 12 0 0 0 ## 21 0 12 0 0 ## 22 0 12 0 0 ## 23 0 12 0 0 ## 24 0 12 0 0 ## 25 0 12 0 0 ## 26 0 12 0 0 ## 27 0 12 0 0 ## 28 0 12 0 0 ## 29 0 12 0 0 ## 30 0 12 0 0 ## 31 0 0 12 0 ## 32 0 0 12 0 ## 33 0 0 12 0 ## 34 0 0 12 0 ## 35 0 0 12 0 ## 36 0 0 12 0 ## 37 0 0 12 0 ## 38 0 0 12 0 ## 39 0 0 12 0 ## 40 0 0 12 0 ## 41 0 0 0 12 ## 42 0 0 0 12 ## 43 0 0 0 12 ## 44 0 0 0 10 ## 45 0 0 0 12 ## 46 0 0 0 12 ## 47 0 0 0 12 ## 48 0 0 0 12 ## 49 0 0 0 12 ## 50 0 0 0 12 Las tabla de frecuencias marginales son, marginal.X = margin.table(conjunta,margin=1) marginal.Y = margin.table(conjunta,margin=2) marginal.X ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## 12 12 12 12 12 12 12 11 12 12 12 12 12 12 8 7 12 2 12 12 12 12 12 12 12 ## 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ## 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 10 12 12 12 12 12 12 marginal.Y ## ## 1 2 3 4 ## 220 120 120 118 tabla &lt;- addmargins(prop.table(conjunta)*100) tabla ## ## 1 2 3 4 Sum ## 1 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 2 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 3 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 4 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 5 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 6 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 7 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 8 1.9031142 0.0000000 0.0000000 0.0000000 1.9031142 ## 9 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 10 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 11 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 12 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 13 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 14 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 15 1.3840830 0.0000000 0.0000000 0.0000000 1.3840830 ## 16 1.2110727 0.0000000 0.0000000 0.0000000 1.2110727 ## 17 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 18 0.3460208 0.0000000 0.0000000 0.0000000 0.3460208 ## 19 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 20 2.0761246 0.0000000 0.0000000 0.0000000 2.0761246 ## 21 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 22 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 23 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 24 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 25 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 26 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 27 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 28 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 29 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 30 0.0000000 2.0761246 0.0000000 0.0000000 2.0761246 ## 31 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 32 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 33 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 34 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 35 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 36 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 37 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 38 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 39 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 40 0.0000000 0.0000000 2.0761246 0.0000000 2.0761246 ## 41 0.0000000 0.0000000 0.0000000 2.0761246 2.0761246 ## 42 0.0000000 0.0000000 0.0000000 2.0761246 2.0761246 ## 43 0.0000000 0.0000000 0.0000000 2.0761246 2.0761246 ## 44 0.0000000 0.0000000 0.0000000 1.7301038 1.7301038 ## 45 0.0000000 0.0000000 0.0000000 2.0761246 2.0761246 ## 46 0.0000000 0.0000000 0.0000000 2.0761246 2.0761246 ## 47 0.0000000 0.0000000 0.0000000 2.0761246 2.0761246 ## 48 0.0000000 0.0000000 0.0000000 2.0761246 2.0761246 ## 49 0.0000000 0.0000000 0.0000000 2.0761246 2.0761246 ## 50 0.0000000 0.0000000 0.0000000 2.0761246 2.0761246 ## Sum 38.0622837 20.7612457 20.7612457 20.4152249 100.0000000 1.5 Histograma del peso en cada grupo de edad Vamos a crear una aplicación Shiny usando el paquete ggplot2. # library(ggplot2) # require(shiny) # shinyApp( # # ui = fluidPage( # # titlePanel(&quot;Histograma del peso de los pollos según el tiempo&quot;), # # sidebarLayout( # # sidebarPanel( # selectInput(&quot;region&quot;, &quot;Tiempo (días):&quot;, # choices=unique(ChickWeight$Time)), # hr() # ), # # mainPanel( # plotOutput(&quot;weightPlot&quot;) # ) # # ) # ), # # server = function(input, output) { # # output$weightPlot &lt;- renderPlot({ # # ggplot(subset(ChickWeight, Time == input$region), aes(x=weight)) + # geom_histogram(bins=6, colour=&quot;#FE9A2E&quot;, fill=&quot;#F7BE81&quot;) + # labs(x=&quot;Peso (g)&quot;, y = &quot;Densidad&quot;) # }) # }, # # options = list(height = 700) # ) "],
["trees.html", "Ejercicio 2 - trees 2.1 Cargando los datos 2.2 Gráfico de grupos de Height 2.3 Gráfica de dispersión 2.4 Regresión para cada par de variables", " Ejercicio 2 - trees 2.1 Cargando los datos Cargamos la librería trees. data(trees) attach(trees) head(trees) ## Girth Height Volume ## 1 8.3 70 10.3 ## 2 8.6 65 10.3 ## 3 8.8 63 10.2 ## 4 10.5 72 16.4 ## 5 10.7 81 18.8 ## 6 10.8 83 19.7 Veamos un breve resumen de los datos. summary(trees) ## Girth Height Volume ## Min. : 8.30 Min. :63 Min. :10.20 ## 1st Qu.:11.05 1st Qu.:72 1st Qu.:19.40 ## Median :12.90 Median :76 Median :24.20 ## Mean :13.25 Mean :76 Mean :30.17 ## 3rd Qu.:15.25 3rd Qu.:80 3rd Qu.:37.30 ## Max. :20.60 Max. :87 Max. :77.00 2.2 Gráfico de grupos de Height Vamos a escoger 3 grupos en los que dividir Height. Por ejemplo, cut(c(63,87),breaks=3) ## [1] (63,71] (79,87] ## Levels: (63,71] (71,79] (79,87] Dividimos los grupos como sigue, df.G1 = subset(trees, Height &lt;= 71,select=c(&quot;Girth&quot;,&quot;Volume&quot;)) df.G2 = subset(trees, 71 &lt; Height &amp; Height &lt;= 79,select=c(&quot;Girth&quot;,&quot;Volume&quot;)) df.G3 = subset(trees, 79 &lt; Height ,select=c(&quot;Girth&quot;,&quot;Volume&quot;)) Para hacer los gráficos, usaremos la librería ggplot2, y para representar los distintos grupos en la misma gráfica gridExtra library(ggplot2) library(gridExtra) Calculamos las gráficas, pg1 &lt;- ggplot(df.G1, aes(x=Girth)) + geom_histogram(binwidth = 0.5, colour=&quot;#43A939&quot;, fill=&quot;#6ED364&quot;) + labs(x=&quot;Peso (g) para el grupo 1&quot;, y = &quot;Densidad&quot;) + xlim(8, 21) + ylim(0, 3) pg2 &lt;- ggplot(df.G2, aes(x=Girth)) + geom_histogram(binwidth = 0.5, colour=&quot;#43A939&quot;, fill=&quot;#6ED364&quot;) + labs(x=&quot;Peso (g) para el grupo 2&quot;, y = &quot;Densidad&quot;) + xlim(8, 21) + ylim(0, 3) pg3 &lt;- ggplot(df.G3, aes(x=Girth)) + geom_histogram(binwidth = 0.5, colour=&quot;#43A939&quot;, fill=&quot;#6ED364&quot;) + labs(x=&quot;Peso (g) para el grupo 3&quot;, y = &quot;Densidad&quot;) + xlim(8, 21) + ylim(0, 3) grid.arrange(pg1,pg2,pg3, top=&quot;Gráfica para Girth&quot;) library(ggplot2) require(gridExtra) pg1 &lt;- ggplot(df.G1, aes(x=Volume)) + geom_histogram(binwidth = 2, colour=&quot;#43A939&quot;, fill=&quot;#6ED364&quot;) + labs(x=&quot;Peso (g) para el grupo 1&quot;, y = &quot;Densidad&quot;) + xlim(10, 78) + ylim(0, 3) pg2 &lt;- ggplot(df.G2, aes(x=Volume)) + geom_histogram(binwidth = 2, colour=&quot;#43A939&quot;, fill=&quot;#6ED364&quot;) + labs(x=&quot;Peso (g) para el grupo 2&quot;, y = &quot;Densidad&quot;) + xlim(10, 78) + ylim(0, 3) pg3 &lt;- ggplot(df.G3, aes(x=Volume)) + geom_histogram(binwidth = 2, colour=&quot;#43A939&quot;, fill=&quot;#6ED364&quot;) + labs(x=&quot;Peso (g) para el grupo 3&quot;, y = &quot;Densidad&quot;) + xlim(10, 78) + ylim(0, 3) grid.arrange(pg1,pg2,pg3, top=&quot;Gráfica para Volumen&quot;) 2.3 Gráfica de dispersión Vamos a crearnos un dataframe que contenga todos los elementos diferenciados por el grupo según su altura al que pertenezca. df.G1$grupo &lt;- c(&quot;1&quot;) df.G2$grupo &lt;- c(&quot;2&quot;) df.G3$grupo &lt;- c(&quot;3&quot;) df.Grupos = rbind(df.G1,df.G2,df.G3) Con este dataframe, obtenemos la siguiente gráfica, qplot(Volume,Girth,data=df.Grupos,col=grupo) 2.4 Regresión para cada par de variables Antes vamos a realizar un estudio preliminar de la relación de las variables. pairs(trees) Vamos a crear una aplicación Shiny para interactuar con los modelos. # require(shiny) # shinyApp( # # ui = fluidPage( # # titlePanel(&quot;Regresión de Y~X&quot;), # # sidebarLayout( # # sidebarPanel( # selectInput(&quot;variable1&quot;, &quot;Variable Y:&quot;, # choices=c(&quot;Girth&quot;, &quot;Height&quot;, &quot;Volume&quot;)), # hr(), # selectInput(&quot;variable2&quot;, &quot;Variable X:&quot;, # choices=c(&quot;Girth&quot;, &quot;Height&quot;, &quot;Volume&quot;)) # ), # # mainPanel( # fluidRow(column(12, verbatimTextOutput(&quot;correlacion&quot;))) # ) # # ) # ), # # server = function(input, output) { # # output$correlacion &lt;- renderPrint({ # summary(lm(trees[input$variable1][,1] ~ trees[input$variable2][,1])) # #trees[input$variable1][,1], # }) # }, # # options = list(height = 750) # ) Además vamos a interactuar con su coeficiente de correlación lineal # require(shiny) # shinyApp( # # ui = fluidPage( # # titlePanel(&quot;Coeficiente de regresión de Y~X&quot;), # # sidebarLayout( # # sidebarPanel( # selectInput(&quot;variable1&quot;, &quot;Variable Y:&quot;, # choices=c(&quot;Girth&quot;, &quot;Height&quot;, &quot;Volume&quot;)), # hr(), # selectInput(&quot;variable2&quot;, &quot;Variable X:&quot;, # choices=c(&quot;Girth&quot;, &quot;Height&quot;, &quot;Volume&quot;)) # ), # # mainPanel( # fluidRow(column(12, verbatimTextOutput(&quot;correlacion&quot;))) # ) # # ) # ), # # server = function(input, output) { # # output$correlacion &lt;- renderPrint({ # cor(trees[input$variable1][,1],trees[input$variable2][,1]) # }) # }, # # options = list(height = 400) # ) Observamos que las variables Girth y Volumen tienen un coeficiente de correlación alto, luego podemos decir que el ajuste de Girth y Volumen es bastante bueno. "],
["mtcars.html", "Ejercicio 3 - mtcars 3.1 Cargando los datos 3.2 Tablas de frecuencias 3.3 Tablas de frecuencia absolutas, relativas y acumuladas 3.4 Resumen descriptivo 3.5 Outliers 3.6 Histograma 3.7 Regresión", " Ejercicio 3 - mtcars 3.1 Cargando los datos Para este ejercicio usaremos la librería mtcars. data(mtcars) attach(mtcars) head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 Veamos un breve resumen de los datos. summary(mtcars) ## mpg cyl disp hp ## Min. :10.40 Min. :4.000 Min. : 71.1 Min. : 52.0 ## 1st Qu.:15.43 1st Qu.:4.000 1st Qu.:120.8 1st Qu.: 96.5 ## Median :19.20 Median :6.000 Median :196.3 Median :123.0 ## Mean :20.09 Mean :6.188 Mean :230.7 Mean :146.7 ## 3rd Qu.:22.80 3rd Qu.:8.000 3rd Qu.:326.0 3rd Qu.:180.0 ## Max. :33.90 Max. :8.000 Max. :472.0 Max. :335.0 ## drat wt qsec vs ## Min. :2.760 Min. :1.513 Min. :14.50 Min. :0.0000 ## 1st Qu.:3.080 1st Qu.:2.581 1st Qu.:16.89 1st Qu.:0.0000 ## Median :3.695 Median :3.325 Median :17.71 Median :0.0000 ## Mean :3.597 Mean :3.217 Mean :17.85 Mean :0.4375 ## 3rd Qu.:3.920 3rd Qu.:3.610 3rd Qu.:18.90 3rd Qu.:1.0000 ## Max. :4.930 Max. :5.424 Max. :22.90 Max. :1.0000 ## am gear carb ## Min. :0.0000 Min. :3.000 Min. :1.000 ## 1st Qu.:0.0000 1st Qu.:3.000 1st Qu.:2.000 ## Median :0.0000 Median :4.000 Median :2.000 ## Mean :0.4062 Mean :3.688 Mean :2.812 ## 3rd Qu.:1.0000 3rd Qu.:4.000 3rd Qu.:4.000 ## Max. :1.0000 Max. :5.000 Max. :8.000 3.2 Tablas de frecuencias Calculamos las tablas de frecuencias de las variables cyl y gear table(cyl) ## cyl ## 4 6 8 ## 11 7 14 table(gear) ## gear ## 3 4 5 ## 15 12 5 Para obtener la tabla con formato latex, usamos el paquete Knitr library(knitr) print(knitr::kable(as.data.frame(table(gear)), format = &quot;latex&quot;, col.names = c(&quot;Cilindradas&quot;,&quot;Num. Cilindradas&quot;),align=&#39;c&#39;, caption=&quot;Cilindradas por coches&quot;)) ## \\begin{table} ## ## \\caption{(\\#tab:unnamed-chunk-5)Cilindradas por coches} ## \\centering ## \\begin{tabular}[t]{c|c} ## \\hline ## Cilindradas &amp; Num. Cilindradas\\\\ ## \\hline ## 3 &amp; 15\\\\ ## \\hline ## 4 &amp; 12\\\\ ## \\hline ## 5 &amp; 5\\\\ ## \\hline ## \\end{tabular} ## \\end{table} Como este documento esta hecho en markdown, exportamos la tabla como markdown, library(knitr) print(knitr::kable(as.data.frame(table(gear)), format = &quot;markdown&quot;, col.names = c(&quot;Cilindradas&quot;,&quot;Num. Cilindradas&quot;),align=&#39;c&#39;, caption=&quot;Cilindradas por coches&quot;)) Cilindradas Num. Cilindradas 3 15 4 12 5 5 3.3 Tablas de frecuencia absolutas, relativas y acumuladas Realizaremos este apartado para las variables am y carb. La tabla de frecuencia absoluta es, print(knitr::kable( table(am,carb), format = &quot;markdown&quot;, align=&#39;c&#39;,caption=&quot;Tabla Transmisión-Nº de carburadores&quot;)) 1 2 3 4 6 8 0 3 6 3 7 0 0 1 4 4 0 3 1 1 print(knitr::kable(table(am,carb), format = &quot;markdown&quot;, align=&#39;c&#39;,caption=&quot;Tabla Transmisión-Nº de carburadores&quot;)) La tabla de frecuencia relativa es, print(knitr::kable(prop.table(table(am,carb)), format = &quot;markdown&quot;, align=&#39;c&#39;,caption=&quot;Tabla Transmisión-Nº de carburadores&quot;)) 1 2 3 4 6 8 0 0.09375 0.1875 0.09375 0.21875 0.00000 0.00000 1 0.12500 0.1250 0.00000 0.09375 0.03125 0.03125 La tabla de frecuencia acumulada para carb es, print(knitr::kable(cumsum(table(carb))), format = &quot;markdown&quot;) 1 2 3 4 6 8 7 17 20 30 31 32 La tabla de frecuencia acumulada para am es, print(knitr::kable(cumsum(table(am))), format = &quot;markdown&quot;) 0 1 19 32 3.4 Resumen descriptivo Con la función summary(), realiazamos un estudio sobre nuestros datos, summary(mtcars) ## mpg cyl disp hp ## Min. :10.40 Min. :4.000 Min. : 71.1 Min. : 52.0 ## 1st Qu.:15.43 1st Qu.:4.000 1st Qu.:120.8 1st Qu.: 96.5 ## Median :19.20 Median :6.000 Median :196.3 Median :123.0 ## Mean :20.09 Mean :6.188 Mean :230.7 Mean :146.7 ## 3rd Qu.:22.80 3rd Qu.:8.000 3rd Qu.:326.0 3rd Qu.:180.0 ## Max. :33.90 Max. :8.000 Max. :472.0 Max. :335.0 ## drat wt qsec vs ## Min. :2.760 Min. :1.513 Min. :14.50 Min. :0.0000 ## 1st Qu.:3.080 1st Qu.:2.581 1st Qu.:16.89 1st Qu.:0.0000 ## Median :3.695 Median :3.325 Median :17.71 Median :0.0000 ## Mean :3.597 Mean :3.217 Mean :17.85 Mean :0.4375 ## 3rd Qu.:3.920 3rd Qu.:3.610 3rd Qu.:18.90 3rd Qu.:1.0000 ## Max. :4.930 Max. :5.424 Max. :22.90 Max. :1.0000 ## am gear carb ## Min. :0.0000 Min. :3.000 Min. :1.000 ## 1st Qu.:0.0000 1st Qu.:3.000 1st Qu.:2.000 ## Median :0.0000 Median :4.000 Median :2.000 ## Mean :0.4062 Mean :3.688 Mean :2.812 ## 3rd Qu.:1.0000 3rd Qu.:4.000 3rd Qu.:4.000 ## Max. :1.0000 Max. :5.000 Max. :8.000 3.5 Outliers Vamos a estudiar los posibles outliers de la variable wt. Primero la representamos por un diagrama de caja y bigote gr &lt;- boxplot(wt) Observamos que hay dos datos atípicos. Veamos cuales son. gr$out ## [1] 5.424 5.345 A continuación, lo veremos con la variable hp gr &lt;- boxplot(hp) Observamos que hay un valor atípico. gr$out ## [1] 335 3.6 Histograma Vamos a calcular el histograma para drat y carb hist(drat) hist(carb) 3.7 Regresión Estudiamos que variables son mas adecuadas para hacer una regresión. pairs(mtcars) Interactuaremos con la siguiente aplicación shiny para todas las variables de los datos. # require(shiny) # shinyApp( # # ui = fluidPage( # # titlePanel(&quot;Regresión de Y~X&quot;), # # sidebarLayout( # # sidebarPanel( # selectInput(&quot;variable1&quot;, &quot;Variable Y:&quot;, # choices=c(&quot;mpg&quot;, &quot;cyl&quot;, # &quot;disp&quot;,&quot;hp&quot;,&quot;drat&quot;,&quot;wt&quot;,&quot;qsec&quot;,&quot;vs&quot;,&quot;am&quot;,&quot;gear&quot;,&quot;carb&quot;)), # hr(), # selectInput(&quot;variable2&quot;, &quot;Variable X:&quot;, # choices=c(&quot;mpg&quot;, &quot;cyl&quot;, # &quot;disp&quot;,&quot;hp&quot;,&quot;drat&quot;,&quot;wt&quot;,&quot;qsec&quot;,&quot;vs&quot;,&quot;am&quot;,&quot;gear&quot;,&quot;carb&quot;)) # ), # # mainPanel( # fluidRow(column(12, verbatimTextOutput(&quot;correlacion&quot;))) # ) # # ) # ), # # server = function(input, output) { # # output$correlacion &lt;- renderPrint({ # summary(lm(mtcars[input$variable1][,1] ~ mtcars[input$variable2][,1])) # #trees[input$variable1][,1], # }) # }, # # options = list(height = 750) # ) De la misma manera, lo haremos para el coeficiente de correlación lineal. # require(shiny) # shinyApp( # # ui = fluidPage( # # titlePanel(&quot;Coeficiente de regresión de Y~X&quot;), # # sidebarLayout( # # sidebarPanel( # selectInput(&quot;variable1&quot;, &quot;Variable Y:&quot;, # choices=c(&quot;mpg&quot;, &quot;cyl&quot;, # &quot;disp&quot;,&quot;hp&quot;,&quot;drat&quot;,&quot;wt&quot;,&quot;qsec&quot;,&quot;vs&quot;,&quot;am&quot;,&quot;gear&quot;,&quot;carb&quot;)), # hr(), # selectInput(&quot;variable2&quot;, &quot;Variable X:&quot;, # choices=c(&quot;mpg&quot;, &quot;cyl&quot;, # &quot;disp&quot;,&quot;hp&quot;,&quot;drat&quot;,&quot;wt&quot;,&quot;qsec&quot;,&quot;vs&quot;,&quot;am&quot;,&quot;gear&quot;,&quot;carb&quot;)) # ), # # mainPanel( # fluidRow(column(12, verbatimTextOutput(&quot;correlacion&quot;))) # ) # # ) # ), # # server = function(input, output) { # # output$correlacion &lt;- renderPrint({ # cor(mtcars[input$variable1][,1],mtcars[input$variable2][,1]) # }) # }, # # options = list(height = 450) # ) "]
]
